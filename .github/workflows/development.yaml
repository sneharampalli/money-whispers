name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Frontend Dependencies
        run: npm install
        working-directory: ./frontend

      - name: List installed modules in frontend/node_modules (Diagnostic)
        run: ls -la ./frontend/node_modules # List contents of the node_modules directory
        # Look for a directory named 'react-router-dom' here.
        # This step helps confirm if the package was actually installed.

      - name: Build Frontend Project
        run: npm run build
        working-directory: ./frontend

      # Add your frontend deployment step here if applicable
      # For example, to deploy to Firebase Hosting or Google Cloud Storage
      # - name: Deploy Frontend
      #   run: |
      #     # Example for Firebase Hosting, assuming Firebase CLI is installed and configured
      #     firebase deploy --only hosting --project money-whispers-d24b9
      #   working-directory: ./frontend


  deploy-backend:
    runs-on: ubuntu-latest
    # Uncomment 'needs' if you want backend deployment to wait for frontend build/test
    # needs: [build-and-test-frontend]
    environment: production # Good practice to specify deployment environment
    permissions:
      contents: 'read'
      id-token: 'write' # REQUIRED for Workload Identity Federation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log OIDC Token Claims
        run: |
          echo "GITHUB_REPOSITORY: ${{ github.repository }}"
          echo "GITHUB_REF: ${{ github.ref }}"
          echo "GITHUB_ACTOR: ${{ github.actor }}"
          echo "GITHUB_EVENT_NAME: ${{ github.event_name }}"
          echo "GITHUB_WORKFLOW: ${{ github.workflow }}"
          echo "GITHUB_JOB: ${{ github.job }}"

      - name: Authenticate to Google Cloud
        id: auth # This ID is used to reference outputs from this step
        uses: google-github-actions/auth@v2
        with:
          # Full resource name of your Workload Identity Provider
          # projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID
          workload_identity_provider: 'projects/365077371450/locations/global/workloadIdentityPools/github-actions-pool/providers/money-whispers-github-actions'
          # Email of the Google Cloud service account to impersonate
          service_account: 'github-action-968926442@money-whispers-d24b9.iam.gserviceaccount.com'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Adjust to your backend's Python version

      - name: Install Backend Dependencies
        # Adjust path if your backend's requirements.txt is not directly under 'backend'
        run: pip install -r requirements.txt
        working-directory: ./backend # Set working directory to your backend folder

      - name: Verify Google Cloud Authentication
        run: |
          # The 'auth' action automatically sets up gcloud CLI.
          # We're just verifying and setting the project context explicitly.
          gcloud auth list
          gcloud config set project money-whispers-d24b9
          echo "Successfully authenticated to Google Cloud as ${{ steps.auth.outputs.service_account_email }}"

      # --- Your Backend Deployment Steps Go Here ---
      # Assuming your backend is in a 'backend' directory at the root of your repo
      # And you want to deploy it to Cloud Run.

      - name: Configure Docker to use gcloud credentials for GCR.io
        run: gcloud auth configure-docker --quiet

      - name: Debug Docker Info
        run: docker info

      - name: Build and push Docker image
        working-directory: backend/
        run: |
          PROJECT_ID=$(gcloud config get-value project)
          echo "DEBUG: Detected Google Cloud Project ID: ${PROJECT_ID}"
          IMAGE_TAG="gcr.io/${PROJECT_ID}/money-whispers-backend:${{ github.sha }}"
          echo "DEBUG: Full Docker Image Tag being used: ${IMAGE_TAG}"
          docker build -t "${IMAGE_TAG}" .
          echo "DEBUG: Docker build command completed."
          docker push "${IMAGE_TAG}"
          echo "DEBUG: Docker push command completed."

      - name: Deploy Backend to Cloud Run
        # Replace 'money-whispers-service' with your desired Cloud Run service name.
        # Replace 'us-central1' with your desired region.
        # Adjust --allow-unauthenticated as per your service's public/private access.
        run: |
          gcloud run deploy money-whispers-service \
            --image gcr.io/money-whispers-d24b9/money-whispers-backend:latest \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --project money-whispers-d24b9 # Ensure project is explicitly set

      # Add other backend-related commands as needed (e.g., database migrations, cron job updates)
      # - name: Run Database Migrations
      #   run: python manage.py migrate # Example for Django/Flask apps
      #   working-directory: ./backend
